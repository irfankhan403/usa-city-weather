{"version":3,"sources":["config/config.ts","services/axios.ts","app/weatherReport/services/cityService.ts","services/common.ts","app/weatherReport/components/CityList.tsx","app/weatherReport/components/CityWeather.tsx","app/weatherReport/components/WeatherReport.tsx","app/weatherReport/actions/cityAction.ts","app/common/components/useDebounce.tsx","app/weatherReport/reducers/CityReducers.ts","app/weatherReport/index.tsx","WeatherApp.tsx","reducers/index.ts","store/index.ts","index.tsx"],"names":["config","baseURL","axios","coreAxios","create","cityService","searchQuery","get","then","res","cities","data","Promise","resolve","cityId","weatherReport","_get","object","keys","defaultVal","Array","isArray","split","length","slice","undefined","CityList","props","classes","useStyles","useSelector","state","onClick","Paper","className","listWrapper","id","List","root","map","city","ListItem","key","_id","button","listItem","ListItemText","primary","secondary","zipcode","makeStyles","width","zIndex","position","top","maxHeight","overflow","CityWeather","CircularProgress","Card","CardContent","Typography","variant","component","Avatar","alt","desc","src","icon","title","color","gutterBottom","pos","tempInF","tempInC","align","maxWidth","marginTop","fontSize","marginBottom","mapDispatchToProps","getCityList","dispatch","type","getCityWeather","cityID","connect","ref","useRef","useState","value","setValue","showList","setShowList","selected","setSelected","debouncedSearchValue","delay","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","useDebounce","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","Container","fixed","Grid","container","item","xs","alignContentCenter","formWrapper","md","sm","searchWrapper","InputBase","input","placeholder","inputProps","onChange","e","onFocus","IconButton","iconButton","aria-label","style","justifyContent","Button","disabled","theme","display","padding","alignItems","marginRight","marginLeft","spacing","flex","initialState","loading","reducers","action","WeatherReport","App","rootReducer","combineReducers","weatherData","store","createStore","compose","applyMiddleware","thunk","window","__REDUX_DEVTOOLS_EXTENSION__","ReactDOM","render","WeatherApp","getElementById"],"mappings":"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","file":"static/js/main.d572266f.chunk.js","sourcesContent":["const config = {\n    baseURL: \"\",\n}\n\nexport default config;","import * as coreAxios from 'axios';\nimport config from '../config/config';\n\nconst axios = coreAxios.default.create({\n  baseURL: config.baseURL\n});\n\nexport default axios;","import axios from '../../../services/axios';\nimport { CityBody } from '../types/CityBody';\nimport { WeatherBody } from '../types/WeatherBody';\n\nconst getCityList = (searchQuery:string) => {\n    return axios.get(`/api/city?q=${searchQuery}`)\n        .then((res: any) => {\n            let cities: CityBody[] = res.data;\n            return Promise.resolve(cities);\n        });\n}\n\nconst getCityWeather = (cityId:string) => {\n    return axios.get(`/api/weather-report/${cityId}`)\n        .then((res: any) => {\n            let weatherReport: WeatherBody = res.data;\n            return Promise.resolve(weatherReport);\n        });\n}\n\nexport const cityService = {\n    getCityList,\n    getCityWeather\n}","export const _get = ( object:any, keys:any, defaultVal:any ):any=>{\n    keys = Array.isArray( keys )? keys : keys.split('.');\n    object = object[keys[0]];\n    if( object && keys.length>1 ){\n      return _get( object, keys.slice(1), defaultVal );\n    }\n    return object === undefined? defaultVal : object;\n  }","import React, { Fragment, } from 'react'\nimport {\n    Paper,\n    List,\n    ListItem,\n    ListItemText\n} from \"@material-ui/core\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { useSelector } from 'react-redux'\nimport { _get } from \"../../../services/common\";\n\ninterface CityListProps {\n    onClick: (city: any) => void\n\n}\n\nconst CityList = (props: CityListProps) => {\n    const classes = useStyles();\n    const cities = useSelector(state => _get(state, \"weatherData.cities\", []))\n    const {onClick} =props;\n    return (\n        <Fragment>\n            <Paper className={classes.listWrapper} id=\"list-wrapper\" >\n                <List className={classes.root}>\n                    { cities.length > 0 ?\n                        cities.map((city: any) => (\n                            <ListItem key={city._id} button className={classes.listItem} onClick={()=>onClick(city)}>\n                                <ListItemText primary={`${city.city}, ${city.state}`} secondary={city.zipcode} />\n                            </ListItem>\n                        ))\n                        :\n                        <ListItem className={classes.listItem} >\n                            <ListItemText primary=\"No city found\" />\n                        </ListItem>\n                    }\n\n                </List>\n            </Paper>\n        </Fragment>\n\n    )\n}\n\n\nexport default CityList;\n\n\nconst useStyles = makeStyles({\n    root: {\n        width: \"100%\",\n        zIndex: 9\n    },\n    listItem: {\n\n    },\n    listWrapper: {\n        position: \"absolute\",\n        top: \"55px\",\n        maxHeight: \"400px\",\n        overflow: \"auto\",\n        width: \"100%\",\n    }\n});","import React, { Fragment } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport Avatar from '@material-ui/core/Avatar';\nimport CircularProgress from '@material-ui/core/CircularProgress';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { useSelector } from 'react-redux';\nimport { _get } from \"../../../services/common\";\n\n\ninterface CityWeatherProps {\n\n\n}\n\nconst CityWeather = (props: CityWeatherProps) => {\n    const classes = useStyles();\n    const weatherReport = useSelector(state => _get(state, \"weatherData.weatherReport\", null))\n    const loading = useSelector(state => _get(state, \"weatherData.loading\", null))\n\n    if (loading) {\n        return <CircularProgress />\n    }\n\n    return (\n        <Fragment>\n            {\n                weatherReport ?\n                    <Card className={classes.root}>\n                        <CardContent>\n                            <Typography variant=\"h5\" component=\"h2\">\n                                {weatherReport.city}\n                            </Typography>\n                            <Avatar alt={`${weatherReport.desc}`} src={`http://openweathermap.org/img/w/${weatherReport.icon}.png`} />\n                            <Typography className={classes.title} color=\"textSecondary\" gutterBottom>\n                                {weatherReport.desc}\n                            </Typography>\n\n                            <Typography className={classes.pos} color=\"textSecondary\">\n                                {weatherReport.tempInF} &#8457; | {weatherReport.tempInC} &#8451;\n                            </Typography>\n                        </CardContent>\n                    </Card>\n                    :\n                    <Typography variant=\"subtitle1\" align=\"center\">\n                        Please select city\n          </Typography>\n            }\n        </Fragment>\n\n\n    );\n}\n\nexport default CityWeather;\n\nconst useStyles = makeStyles({\n    root: {\n        maxWidth: 400,\n        width: \"100%\",\n        marginTop: 20,\n    },\n    title: {\n        fontSize: 14,\n    },\n    pos: {\n        marginBottom: 12,\n    },\n});\n","import React ,{useState, useEffect, RefObject, useRef} from 'react'\nimport { connect } from \"react-redux\";\nimport { getCityList,getCityWeather } from \"../actions/cityAction\";\nimport { \n    Grid, \n    Paper, \n    Container, \n    InputBase,\n    IconButton,\n    Typography,\n    Button\n} from \"@material-ui/core\";\nimport SearchIcon from '@material-ui/icons/Search';\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport CityList from \"./CityList\";\nimport CityWeather from \"./CityWeather\";\nimport { CityBody } from '../types/CityBody';\nimport useDebounce from '../../common/components/useDebounce'\n\ninterface WeatherReportProps{\n    getCityList:(query:string)=>void\n    getCityWeather:(city:string)=>void\n}\n\nconst WeatherReport = (props: WeatherReportProps)=> {\n    const ref:RefObject<HTMLDivElement> = useRef(null);\n    const initialState = \"\"\n\n    const [value, setValue] = useState(initialState);\n    const [showList, setShowList] = useState(false);\n    const [selected, setSelected] = useState<CityBody | undefined>(undefined);\n    const classes = useStyles();\n\n    const debouncedSearchValue = useDebounce(value, 500);\n\n    useEffect(() => {\n        if (debouncedSearchValue) {\n            props.getCityList(value)\n        }\n        document.addEventListener(\"mousedown\", handleClickOutside);\n        return () => {\n          document.removeEventListener(\"mousedown\", handleClickOutside);\n        };\n      });\n\n    function handleClickOutside(event :any) {\n        if (ref.current && !ref.current.contains(event.target)) {\n            setShowList(false)\n        }\n    }\n    const handleSelect = (city: CityBody) => {\n        setSelected(city);\n        setShowList(false)\n        setValue(city.city)\n    }\n\n    const getReport= ()=>{\n        //@ts-ignore\n        props.getCityWeather(selected._id);\n    }\n    return (\n        <Container fixed>\n            <Grid container>\n                <Grid item xs={12} className={classes.alignContentCenter}>\n                <Typography variant=\"h5\" align=\"center\" gutterBottom>\n                    Weather Report\n                </Typography>\n                </Grid>\n                <Grid item container xs={12} className={classes.formWrapper}>\n                    <Grid item xs={12} md={6} sm={9} className={classes.formWrapper}>\n                    <Paper component=\"form\" className={classes.searchWrapper} ref={ref}>\n                        <InputBase\n                            className={classes.input}\n                            placeholder=\"Search City\"\n                            inputProps={{ 'aria-label': 'search city' }}\n                            value={value}\n                            onChange={(e:any) => setValue(e.target.value)}\n                            onFocus={()=>setShowList(true)}\n                        />\n                        <IconButton type=\"submit\" className={classes.iconButton} aria-label=\"search\">\n                            <SearchIcon />\n                        </IconButton>\n                        {\n                            showList ? <CityList onClick={handleSelect}/> : null\n                        }\n                        \n                    </Paper>\n                    </Grid>\n                    <Grid item xs={12} md={3} sm={3} className={classes.formWrapper} style={{justifyContent:\"left\"}}>\n                    <Button variant=\"contained\" className={classes.button} color=\"primary\" onClick={()=>getReport()} disabled={selected ===undefined}>\n                        Get Weather Report\n                    </Button>\n                    </Grid>\n                </Grid>\n                <Grid item xs={12} className={classes.alignContentCenter}>\n                    <CityWeather />\n                </Grid>\n            </Grid>\n            \n        </Container>\n\n    )\n}\n\n\nconst mapStateToProps = null;\n\nconst mapDispatchToProps ={\n    getCityList,\n    getCityWeather\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(WeatherReport);\n\nconst useStyles = makeStyles((theme:any) => ({\n    alignContentCenter:{\n        marginTop:30,\n        display:\"flex\",\n        justifyContent: \"center\"\n    },\n    formWrapper:{\n        display: 'flex',\n        marginTop:10,\n        justifyContent: \"center\"\n\n    },\n    searchWrapper: {\n        position:\"relative\",\n        padding: '2px 4px',\n        display: 'flex',\n        alignItems: 'center',\n        width:\"100%\",\n        marginRight:10,\n      },\n      input: {\n        marginLeft: theme.spacing(1),\n        flex: 1,\n        \"&.Mui-focused ~ #list-wrapper\":{\n            display:\"block\"\n        }\n      },\n      iconButton: {\n        padding: 10,\n      },\n      button:{\n          zIndex:-1\n      }\n}));","import { CityBody } from '../types/CityBody';\nimport { cityService } from '../services/cityService';\nimport { CityActions } from \"../types/CityAction\";\nimport { WeatherBody } from '../types/WeatherBody';\n\n\n\nconst getCityList = (searchQuery:string) => (dispatch: any) => {\n    const success = (data: CityBody[]): CityActions => ({ type: 'LOAD_CITIES', data });\n    cityService.getCityList(searchQuery).then((res: any) => { dispatch(success(res.data)) })\n}\n\nconst getCityWeather = (cityID:string) => (dispatch: any) => {\n    dispatch({ type: 'LOADING'});\n    const success = (data: WeatherBody): CityActions => ({ type: 'LOAD_CITY_WEATHER', data });\n    cityService.getCityWeather(cityID).then((res: any) => { dispatch(success(res.data)) })\n}\n\n\nexport {\n    getCityList,\n    getCityWeather\n}","import React, { useState, useEffect } from 'react';\n\n// Our hook\nexport default function useDebounce(value:any, delay:number) {\n  const [debouncedValue, setDebouncedValue] = useState(value);\n\n  useEffect(\n    () => {\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value] \n  );\n\n  return debouncedValue;\n}","import { CityActions } from '../types/CityAction';\nimport { CityBody } from '../types/CityBody';\nimport { WeatherBody } from '../types/WeatherBody';\n\ninterface CityState {\n    cities: CityBody[],\n    weatherReport:WeatherBody|null,\n    loading:boolean\n};\n\nconst initialState: CityState = {\n    cities: [],\n    weatherReport:null,\n    loading:false,\n};\n\n\nconst CityReducers = (state = initialState, action: CityActions) => {\n    switch (action.type) {\n        case 'LOAD_CITIES': {\n            return { ...state,loading:false, cities: action.data }\n        }\n        case 'LOAD_CITY_WEATHER':{\n            return { ...state,loading:false, weatherReport: action.data }\n        }\n        case 'LOADING':{\n            return { ...state,loading:true }\n        }\n        default:\n            return state;\n    }\n}\nexport default CityReducers;","import WeatherReport from './components/WeatherReport';\nimport cityReducers from './reducers/CityReducers';\n// import usersReducers from './reducers/usersReducers'\n\nconst components = { WeatherReport };\n\nconst reducers = cityReducers;\nexport { components, reducers };\n","import React from 'react';\nimport { components as weatherReportComponents } from \"./app/weatherReport\";\n\nconst { WeatherReport } = weatherReportComponents;\n\nfunction App() {\n  return (\n    <WeatherReport/>\n    );\n}\n\nexport default App;\n","import { combineReducers } from 'redux';\n\nimport { reducers as weatherReport } from '../app/weatherReport';\n\nconst rootReducer = combineReducers({\n    weatherData : weatherReport\n});\n\nexport default rootReducer;","import { createStore, applyMiddleware, compose } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst store = createStore(\n\trootReducer,\n\tcompose(\n\t\tapplyMiddleware(thunk),\n\t\t(window as any).__REDUX_DEVTOOLS_EXTENSION__ && (window as any).__REDUX_DEVTOOLS_EXTENSION__(),\n\t),\n);\n\nexport  {store};\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport WeatherApp from './WeatherApp';\nimport { Provider } from 'react-redux';\nimport { store } from './store';\nimport \"./index.css\"\n\nReactDOM.render(\n    //@ts-ignore\n    <Provider store={store}>\n        <WeatherApp />\n    </Provider>\n, document.getElementById('root'));\n"],"sourceRoot":""}